// Code generated by ifacemaker. DO NOT EDIT.

package ambient

import (
	"context"
	"net/http"
	"time"
)

// SecureSite provides plugin functions.
type SecureSite interface {
	// Error handles returning the proper error.
	Error(siteError error) (err error)
	// Load forces a reload of the data.
	Load(ctx context.Context) error
	// Authorized determines if the current context has access.
	Authorized(_ context.Context, grant Grant) bool
	// NeighborPluginGrantList gets the grants requests for a neighbor plugin.
	NeighborPluginGrantList(ctx context.Context, pluginName string) ([]GrantRequest, error)
	// NeighborPluginGrants gets the map of granted permissions.
	NeighborPluginGrants(ctx context.Context, pluginName string) (map[Grant]bool, error)
	// NeighborPluginGranted returns true if the plugin has the grant.
	NeighborPluginGranted(ctx context.Context, pluginName string, grantName Grant) (bool, error)
	// NeighborPluginRequestedGrant returns true if the plugin requests the grant.
	// This shouldn't be used to determine if a plugin has been approved the grant.
	NeighborPluginRequestedGrant(ctx context.Context, pluginName string, grantName Grant) (bool, error)
	// SetNeighborPluginGrant sets a grant for a neighbor plugin.
	SetNeighborPluginGrant(ctx context.Context, pluginName string, grantName Grant, granted bool) error
	// Plugins returns the plugin list.
	Plugins(ctx context.Context) (map[string]PluginData, error)
	// PluginNames returns the list of plugin name.
	PluginNames(ctx context.Context) ([]string, error)
	// DeletePlugin deletes a plugin.
	DeletePlugin(ctx context.Context, name string) error
	// EnablePlugin enables a plugin.
	EnablePlugin(ctx context.Context, pluginName string, loadPlugin bool) error
	// LoadSinglePluginPages loads the plugin.
	LoadSinglePluginPages(ctx context.Context, name string)
	// DisablePlugin disables a plugin.
	DisablePlugin(ctx context.Context, pluginName string, unloadPlugin bool) error
	// SavePost saves a post.
	SavePost(ctx context.Context, ID string, post Post) error
	// PostsAndPages returns the list of posts and pages.
	PostsAndPages(ctx context.Context, onlyPublished bool) (PostWithIDList, error)
	// PublishedPosts returns the list of published posts.
	PublishedPosts(ctx context.Context) ([]Post, error)
	// PublishedPages returns the list of published pages.
	PublishedPages(ctx context.Context) ([]Post, error)
	// PostBySlug returns the post by slug.
	PostBySlug(ctx context.Context, slug string) (PostWithID, error)
	// PostByID returns the post by ID.
	PostByID(ctx context.Context, ID string) (Post, error)
	// DeletePostByID deletes a post.
	DeletePostByID(ctx context.Context, ID string) error
	// PluginNeighborRoutesList gets the routes for a neighbor plugin.
	PluginNeighborRoutesList(ctx context.Context, pluginName string) ([]Route, error)
	// AuthenticatedUser returns if the current user is authenticated.
	AuthenticatedUser(r *http.Request) (string, error)
	// UserLogin sets the current user as authenticated.
	UserLogin(r *http.Request, username string) error
	// UserPersist sets the user session to retain after browser close.
	UserPersist(r *http.Request, persist bool) error
	// UserLogout logs out the current user.
	UserLogout(r *http.Request) error
	// LogoutAllUsers logs out all users.
	LogoutAllUsers(r *http.Request) error
	// SetCSRF sets the session with a token and returns the token for use in a form
	// or header.
	SetCSRF(r *http.Request) string
	// CSRF returns true if the CSRF token is valid.
	CSRF(r *http.Request, token string) bool
	// SessionValue returns session value by name.
	SessionValue(r *http.Request, name string) string
	// SetSessionValue sets a value on the current session.
	SetSessionValue(r *http.Request, name string, value string) error
	// DeleteSessionValue deletes a session value on the current session.
	DeleteSessionValue(r *http.Request, name string)
	// PluginNeighborSettingsList gets the grants requests for a neighbor plugin.
	PluginNeighborSettingsList(ctx context.Context, pluginName string) ([]Setting, error)
	// SetPluginSetting sets a variable for the plugin.
	SetPluginSetting(ctx context.Context, settingName string, value string) error
	// PluginSettingBool returns a plugin setting as a bool.
	PluginSettingBool(ctx context.Context, name string) (bool, error)
	// PluginSettingString returns a setting for the plugin as a string.
	PluginSettingString(ctx context.Context, fieldName string) (string, error)
	// PluginSetting returns a setting for the plugin as an interface{}.
	PluginSetting(ctx context.Context, fieldName string) (interface{}, error)
	// SetNeighborPluginSetting sets a setting for a neighbor plugin.
	SetNeighborPluginSetting(ctx context.Context, pluginName string, settingName string, value string) error
	// NeighborPluginSettingString returns a setting for a neighbor plugin as a string.
	NeighborPluginSettingString(ctx context.Context, pluginName string, fieldName string) (string, error)
	// NeighborPluginSetting returns a setting for a neighbor plugin as an interface{}.
	NeighborPluginSetting(ctx context.Context, pluginName string, fieldName string) (interface{}, error)
	// PluginTrusted returns whether a plugin is trusted or not.
	PluginTrusted(ctx context.Context, pluginName string) (bool, error)
	// SetTitle sets the title.
	SetTitle(ctx context.Context, title string) error
	// Title returns the title.
	Title(ctx context.Context) (string, error)
	// SetScheme sets the site scheme.
	SetScheme(ctx context.Context, scheme string) error
	// Scheme returns the site scheme.
	Scheme(ctx context.Context) (string, error)
	// SetURL sets the site URL.
	SetURL(ctx context.Context, URL string) error
	// URL returns the URL without the scheme at the beginning.
	URL(ctx context.Context) (string, error)
	// FullURL returns the URL with the scheme at the beginning.
	FullURL(ctx context.Context) (string, error)
	// Updated returns the home last updated timestamp.
	Updated(ctx context.Context) (time.Time, error)
	// SetContent sets the home page content.
	SetContent(ctx context.Context, content string) error
	// Content returns the site home page content.
	Content(ctx context.Context) (string, error)
	// Tags returns the list of tags.
	Tags(ctx context.Context, onlyPublished bool) (TagList, error)
}
